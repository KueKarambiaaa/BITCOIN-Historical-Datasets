# -*- coding: utf-8 -*-
"""Bitcoin Historical Data (ML).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeCshJwkS2sbDaxGfOZGY5N5Znj-Phrv

NAMA : RAHMI AMILIA.A

EMAIL : amyliarahmi@gmail.com

ID DICODING : cakekarambiaa

<div style="text-align: center;">
  <img src="https://stormgain.com/sites/default/files/2024-03/bitcoin-price-predction-main.jpg" alt="Deskripsi Gambar" style="max-width: 100%; height: auto;">
</div>

# 📈 Proyek Machine Learning: Prediksi Harga Bitcoin

Proyek ini bertujuan untuk memprediksi harga penutupan harian Bitcoin menggunakan teknik regresi. Kita akan menggunakan dataset historical Bitcoin dari Kaggle dan membangun model machine learning dengan algoritma Linear Regression dan Random Forest.

## Domain & Business Understanding

Prediksi harga aset kripto seperti Bitcoin penting untuk membantu pengambilan keputusan dalam investasi dan trading. Harga yang sangat volatil membuat prediksi ini menjadi tantangan sekaligus peluang.

Dataset yang digunakan berasal dari Kaggle [Kaggle - Bitcoin Historical Dataset](https://www.kaggle.com/datasets/novandraanugrah/bitcoin-historical-datasets-2018-2024)
Dataset ini berisi data perdagangan Bitcoin, dengan beberapa atribut penting, antara lain:


*   Open Time
*   Open
*   High
*   Low
*   Close
*   Volume
*   Quote Asset Volume
*   Number of trades
*   Take Buy base asset volume
*   Take buy quote asset volume

Dari data tersebut, beberapa fitur yang relevan dipilih untuk membangun model prediksi harga Bitcoin.

## 📌 Business Understanding

### 🧩 Problem Statement
Harga Bitcoin sangat fluktuatif dan sulit diprediksi, membuat investor dan trader menghadapi risiko tinggi dalam pengambilan keputusan. Oleh karena itu, diperlukan model prediksi harga yang andal untuk membantu dalam proses pengambilan keputusan investasi jangka pendek maupun jangka panjang.

### 🎯 Goals
Tujuan dari proyek ini adalah membangun model machine learning yang dapat memprediksi harga penutupan harian Bitcoin berdasarkan data historis. Model ini akan membantu pengguna untuk memahami tren harga dan mengambil keputusan dengan risiko yang lebih terukur.

### 🧪 Solution Statement
Untuk mencapai tujuan tersebut, proyek ini akan:
1. Menggunakan beberapa algoritma machine learning regresi, yaitu:
   - **Linear Regression**
   - **Random Forest Regressor**
   - **XGBoost Regressor**
2. Membandingkan performa dari ketiga model menggunakan metrik evaluasi seperti MAE, MSE, RMSE, dan R².
3. Memilih model terbaik berdasarkan nilai R² tertinggi dan error terkecil, serta melakukan visualisasi prediksi terhadap data aktual.

## 🤖 Model Comparison: Kelebihan & Kekurangan

### Linear Regression
- ✅ **Kelebihan**: Sederhana, cepat dilatih, dan mudah dipahami.
- ❌ **Kekurangan**: Tidak dapat menangani hubungan non-linear secara baik.

### Random Forest Regressor
- ✅ **Kelebihan**: Dapat menangani data non-linear, lebih robust terhadap overfitting.
- ❌ **Kekurangan**: Lebih kompleks, memerlukan lebih banyak sumber daya komputasi.

### XGBoost Regressor
- ✅ **Kelebihan**: Performa tinggi, efisien untuk dataset besar, unggul dalam kompetisi prediksi.
- ❌ **Kekurangan**: Memerlukan tuning parameter yang lebih banyak untuk hasil optimal.

### Model Terbaik
Berdasarkan hasil evaluasi, model dengan nilai **R² tertinggi** dan **RMSE terkecil** dipilih sebagai model terbaik karena dapat merepresentasikan hubungan antar fitur dan target dengan lebih akurat.

## Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

"""## Load Dataset"""

df = pd.read_csv('/content/btc_1d_data_2018_to_2025.csv')

df.head()

df.tail()

df.describe()

"""## EDA - Exploratory Data Analysis"""

print(df.columns)

df['Open time'] = pd.to_datetime(df['Open time'])

"""Statistik deskriptif"""

print(df.describe())

print(df.isnull().sum())

plt.figure(figsize=(8,4))
sns.histplot(df['Close'], bins=50, kde=True)
plt.title('Distribusi Harga Penutupan Bitcoin')
plt.show()

plt.figure(figsize=(12,6))
plt.plot(df['Open time'], df['Close'])
plt.title('Harga Bitcoin dari Waktu ke Waktu')
plt.xlabel('Waktu')
plt.ylabel('Harga')
plt.show()

numeric_cols = df.select_dtypes(include=[np.number])

plt.figure(figsize=(10,8))
sns.heatmap(numeric_cols.corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi Fitur')
plt.show()

"""## Data Preparation"""

df = df[['Open', 'High', 'Low', 'Volume', 'Close']]

print(df.isnull().sum())

X = df.drop('Close', axis=1)
y = df['Close']

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, shuffle=False
)

print(f"Jumlah data train: {len(X_train)}")
print(f"Jumlah data test: {len(X_test)}")

"""## Modeling"""

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

xgb_model = XGBRegressor(n_estimators=100, random_state=42)
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

svr_model = SVR(kernel='rbf', C=100)
svr_model.fit(X_train, y_train)
svr_pred = svr_model.predict(X_test)

"""## Evaluation

"""

def evaluate_model(y_true, y_pred, model_name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)

    print(f" {model_name} Performance:")
    print(f"MAE: {mae:.2f}")
    print(f"RMSE: {rmse:.2f}")
    print(f"R2 Score: {r2:.2f}")
    print("-"*30)

evaluate_model(y_test, rf_pred, "Random Forest")
evaluate_model(y_test, xgb_pred, "XGBoost")
evaluate_model(y_test, svr_pred, "SVR")

"""## Visualization"""

plt.figure(figsize=(15,6))
plt.plot(y_test.values, label='Actual', color='black')
plt.plot(rf_pred, label='Random Forest Prediction')
plt.plot(xgb_pred, label='XGBoost Prediction')
plt.plot(svr_pred, label='SVR Prediction')
plt.legend()
plt.title('Perbandingan Harga Asli vs Prediksi')
plt.xlabel('Sample')
plt.ylabel('Harga Bitcoin')
plt.show()

sns.pairplot(df[['Open', 'High', 'Low', 'Close', 'Volume']])
plt.suptitle('Pairplot Antar Fitur Harga Bitcoin', y=1.02)
plt.show()

"""## 📊 Penjelasan Metrik Evaluasi

Untuk mengevaluasi performa model, digunakan beberapa metrik regresi:

- **Mean Absolute Error (MAE)**:
  Mengukur rata-rata selisih absolut antara nilai aktual dan prediksi.
  
Formula: \( MAE = \frac{1}{n} \sum_{i=1}^{n} |y_i - \hat{y}_i| \)

- **Mean Squared Error (MSE)**:
  Mengukur rata-rata kuadrat dari selisih antara nilai aktual dan prediksi.
  
Formula: \( MSE = \frac{1}{n} \sum_{i=1}^{n} (y_i - \hat{y}_i)^2 \)

- **Root Mean Squared Error (RMSE)**:
  Akar dari MSE, memberikan penalti lebih besar untuk kesalahan besar.
  
Formula: \( RMSE = \sqrt{MSE} \)

- **R² Score (Koefisien Determinasi)**:
  Mengukur seberapa baik variabel independen menjelaskan variabel dependen.
  
Formula: \( R^2 = 1 - \frac{\sum{(y_i - \hat{y}_i)^2}}{\sum{(y_i - \bar{y})^2}} \)

Semakin tinggi nilai R² (maksimal 1), maka model semakin baik.
"""

